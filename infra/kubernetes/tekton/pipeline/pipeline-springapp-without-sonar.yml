apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: springapp-build-and-push-without-sonar
  namespace: tekton-pipelines
spec:
  workspaces:
    - name: shared-workspace
  params:
    - name: IMAGE
      type: string
  tasks:
    - name: fetch-repo
      taskRef:
        name: git-clone
      workspaces:
        - name: output
          workspace: shared-workspace
      params:
        - name: url
          value: https://github.com/kizhaku/springboot-deploy-flavours.git
        - name: revision
          value: main
        - name: deleteExisting
          value: "true"

    - name: compute-image-tag
      runAfter: [fetch-repo]
      taskSpec:
        results:
          - name: tag
            description: "Increment image tag"
        workspaces:
          - name: source
        steps:
          - name: compute
            image: alpine/git
            workingDir: /workspace/source
            script: |
              #!/bin/sh
              set -e
              VERSION_FILE="VERSION"

              # If no VERSION file, start at 1.0.0
              if [ ! -f "$VERSION_FILE" ]; then
                echo "1.0.0" > "$VERSION_FILE"
              fi

              VERSION=$(cat "$VERSION_FILE")
              MAJOR=$(echo $VERSION | cut -d. -f1)
              MINOR=$(echo $VERSION | cut -d. -f2)
              PATCH=$(echo $VERSION | cut -d. -f3)

              NEW_PATCH=$((PATCH + 1))
              NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"

              echo "$NEW_VERSION" > "$VERSION_FILE"
              echo -n "$NEW_VERSION" > "$(results.tag.path)"

              echo "Version bumped from $VERSION to $NEW_VERSION"
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: run-tests
      runAfter: [fetch-repo]
      taskRef:
        name: gradle
      workspaces:
        - name: source
          workspace: shared-workspace
      params:
        - name: GRADLE_IMAGE
          value: gradle:8.10.2-jdk21
        - name: TASKS
          value:
           - test
          #  - jacocoTestReport

    # - name: sonar-analysis
    #   runAfter: [run-tests]
    #   taskSpec:
    #     steps:
    #       - name: sonar-analysis
    #         image: gradle:8.10.2-jdk21
    #         workingDir: /workspace/source
    #         script: |
    #           gradle sonar --no-daemon \
    #             -Dsonar.host.url=$SONAR_HOST_URL \
    #             -Dsonar.token=$SONAR_TOKEN
    #         env:
    #           - name: SONAR_HOST_URL
    #             value: "http://sonarqube-sonarqube.sonarqube:9000"
    #           - name: SONAR_TOKEN
    #             valueFrom:
    #               secretKeyRef:
    #                 name: sonar-auth
    #                 key: SONAR_TOKEN
    #         resources:
    #           requests:
    #             memory: "1Gi"
    #             cpu: "500m"
    #           limits:
    #             memory: "2Gi"
    #             cpu: "1"
    #     workspaces:
    #       - name: source
    #   workspaces:
    #     - name: source
    #       workspace: shared-workspace

    # - name: quality-gate
    #   runAfter: [sonar-analysis]
    #   taskSpec:
    #     steps:
    #       - name: quality-gate-check
    #         image: akizhaku/ci-tools:latest
    #         script: |
    #           #!/bin/sh
    #           set -e
              
    #           echo "Checking SonarQube Quality Gate..."
              
    #           analysisId=$(curl -s -u $SONAR_TOKEN: \
    #           "$SONAR_HOST_URL/api/project_analyses/search?project=springapp" \
    #           | jq -r '.analyses[0].key')
              
    #           status=$(curl -s -u $SONAR_TOKEN: \
    #           "$SONAR_HOST_URL/api/qualitygates/project_status?analysisId=$analysisId" \
    #           | jq -r '.projectStatus.status')
              
    #           echo "Quality Gate status: $status"
    #           if [ "$status" != "OK" ]; then
    #             echo "Quality Gate failed"
    #             exit 1
    #           fi
    #           echo "Quality Gate passed"
    #         env:
    #           - name: SONAR_HOST_URL
    #             value: "http://sonarqube-sonarqube.sonarqube:9000"
    #           - name: SONAR_TOKEN
    #             valueFrom:
    #               secretKeyRef:
    #                 name: sonar-auth
    #                 key: SONAR_TOKEN

    - name: build-jar
      runAfter: [run-tests]
      taskRef:
        name: gradle
      workspaces:
        - name: source
          workspace: shared-workspace
      params:
        - name: GRADLE_IMAGE
          value: gradle:8.10.2-jdk21
        - name: TASKS
          value:
            - build
            - "-x"
            - test

    - name: build-and-push-image
      runAfter: [build-jar]
      taskRef:
        name: buildah
      workspaces:
        - name: source
          workspace: shared-workspace
      params:
        - name: IMAGE
          value: docker.io/akizhaku/springapp:$(tasks.compute-image-tag.results.tag)
        - name: DOCKERFILE
          value: Dockerfile
        - name: CONTEXT
          value: .
        - name: TLSVERIFY
          value: "false"

    - name: update-manifest
      runAfter: [build-and-push-image]
      taskSpec:
        workspaces:
          - name: source
        steps:
          - name: update-deployment
            image: alpine/git
            workingDir: /workspace/source
            script: |
              #!/bin/sh
              set -e
              git config --global --add safe.directory /workspace/source
              git config --global credential.helper store
              echo "https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com" > ~/.git-credentials

              cd infra/kubernetes/local
              echo "Updating deployment.yml to image tag ${TAG}"

              git config --global user.email "tekton-bot@ci.local"
              git config --global user.name "Tekton Bot"

              # update image name
              sed -i "s#image:.*docker.io/akizhaku/springapp:.*#image: docker.io/akizhaku/springapp:${TAG}#g" deployment.yml

              git add deployment.yml ../../../VERSION
              git commit -m "ci: update image tag to ${TAG}"
              git push origin HEAD:main
            env:
              - name: GIT_USERNAME
                valueFrom:
                  secretKeyRef:
                    name: git-credentials
                    key: username
              - name: GIT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: git-credentials
                    key: password
              - name: TAG
                value: "$(tasks.compute-image-tag.results.tag)"
      workspaces:
        - name: source
          workspace: shared-workspace